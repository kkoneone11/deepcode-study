# vue

#### 1. let 与 const

**1.let与var**

- let：ES6新增，用于声明变量，有**块级作用域**
- var：ES5中用于声明变量的关键字，**存在各种问题（例如：红杏出墙~）**
- 如果你的代码里还存在 var，那你的良心就大大的坏了！

**var存在的问题：**

```html
 // 1.声明提升
 // 此处会正常打印，但这是错误的（属于先上车后买票了！）
 console.log(name); 
 var name = "大帅比";
 
 // 2. 变量覆盖
 var demo = "小明";
 var demo = "小红";
 // 此处会打印小红，这也是错误的（属于套牌车，违法的啊，兄弟）
 // 同一个项目中，发生变量覆盖可能会导致数据丢失以及各种不可预知的bug，原则上来说：变量不能重名
 console.log(demo)

// 3. 没有块级作用域
  function fn2(){
      for(var i = 0; i < 5; i++){
          // do something
      }
      // 此处会正常打印出 i 的值，这是错误的
      // i是定义在循环体之内的，只能在循环体内打印，当前现象叫做红杏出墙！！！
      console.log(i);
  }
  fn2();

```

**let不会存在上述问题：**

```html
 // 1. 不会存在声明提前
 // 此处会报错（这里必须报错，原则上来说不能先上车后买票）
 console.log(name); 
 let name = "大帅比";
 
 // 2. 不会有变量覆盖
 let demo = "小明";
 let demo = "小红";
 // 此处会报错（不能使用套牌车！）告诉你已经定义了此变量。避免了项目中存在变量覆盖的问题
 console.log(demo)

// 3. 有块级作用域
  function fn2(){
      for(let i = 0; i < 5; i++){
          // do something
      }
      // 此处会报错，无法打印，防止红杏出墙！！！
      // i是定义在循环体之内的，循环体外当然无法打印 
      console.log(i);
  }
  fn2();

```

**1.2 const**

- const 声明一个只读的常量，一旦声明，常量的值就不能改变
- 一般用于全局变量
- 通常变量名全部大写（请按照规则来，不要乱搞，容易出事情） 

## 2. 解构赋值

- 解构赋值是对赋值运算符的扩展
- 针对数组或者对象进行模式匹配，然后对其中的变量进行赋值
- 代码简洁且易读，语义更加清晰明了，方便了复杂对象中数据字段获取（**简而言之：用起来很爽！**）

**2.1 用在数组上**

```html
let [a, b, c] = [1, 2, 3];
// a = 1，b = 2，c = 3 相当于重新定义了变量a,b,c，取值也更加方便

// , = 占位符
let arr = ["小明", "小花", "小鱼", "小猪"];
let [,,one] = arr; // 这里会取到小鱼

// 解构整个数组
let strArr = [...arr];
// 得到整个数组
console.log(strArr);

```

**2.2 用在对象上**

```html
let obj = {
   className : "卡西诺",
   age: 18
}
let {className} = obj; // 得到卡西诺
let {age} = obj;	// 得到18

// 剩余运算符
let {a, b, ...demo} = {a: 1, b: 2, c: 3, d: 4};
// a = 1
// b = 2
// demo = {c: 3, d: 4}
```

## 3. ES6 函数

**3.1箭头函数**

- 箭头函数是一种更加简洁的函数书写方式
- **箭头函数本身没有作用域（无this）**
- 箭头函数的this指向上一层，**上下文决定其this**
- 基本语法：参数 => 函数体

**3.1.1基本用法**

```html
let fn = v => v;
//等价于
let fn = function(num){
 return num;
}
fn(100);  // 输出100
```

**3.1.2带参数的写法**

```
let fn2 = (num1,num2) => {
 let result = num1 + num2;
 return result;
}
fn2(3,2);  // 输出5
```

**3.1.3 箭头函数中的this指向问题**

- 箭头函数体中的 this 对象，是定义函数时的对象，而不是使用函数时的对象。在函数定义的时候就已经决定了

```
function fn3(){
  setTimeout(()=>{
    // 定义时，this 绑定的是 fn3 中的 this 对象
    console.log(this.a);
  },0)
}
var a = 10;
// fn3 的 this 对象为 {a: 10}，因为它指向全局: window.a
fn3.call({a: 18});  // 改变this指向，此时 a = 18
```

**3.1.4 箭头函数适用的场景**

- 当我们代码里存在这样的代码：let self = this;
- 需要新建变量去保存this的时候
- 案例如下：

```
let Person1 = {
    'age': 18,
    'sayHello': function () {
      setTimeout(()=>{
        console.log(this.age);
      });
    }
};
var age = 20;
Person1.sayHello();  // 18
```

## 4. Class类

- class (类)作为对象的模板被引入，可以通过 class 关键字定义类
- class 的本质是 function，同样可以看成**一个块**
- 可以看作一个语法糖，让**对象原型的写法更加清晰**
- 更加标准的**面向对象编程**语法

**4.1类的定义**

```html
// 匿名类
let Demo = class {
    constructor(a) {
        this.a = a;
    }
}
// 命名类
let Demo = class Demo {
    constructor(a) {
        this.a = a;
    }
}
```

**4.2 类的声明**

```
class Demo {
    constructor(a) {
        this.a = a;
    }
}
```

- 请注意，类不能重复声明
- 类定义不会被提升，必须在访问前对类进行定义，否则就会报错。
- 类中方法不需要 function 关键字。
- 方法间不能加分号

**4.3 类的主体**

- 公共属性（依然可以定义在原型上）

```
class Demo{}
Demo.prototype.a = 2;
```

- 实例属性

```
class Demo {
    a = 2;
    constructor () {
        console.log(this.a);
    }
}
```

- 方法：constructor

```
class Demo{
    constructor(){
      console.log('我是构造器');
    }
}
new Demo(); // 我是构造器
```

**4.4 实例化对象**

```
class Demo {
    constructor(a, b) {
        this.a = a;
        this.b = b;
        console.log('Demo');
    }
    sum() {
        return this.a + this.b;
    }
}
let demo1 = new Demo(2, 1);
let demo2 = new Demo(3, 1);
// 两者原型链是相等的
console.log(demo1._proto_ == demo2._proto_); // true
 
demo1._proto_.sub = function() {
    return this.a - this.b;
}
console.log(demo1.sub()); // 1
console.log(demo2.sub()); // 2 
```



***



# promise&async await异步编程

### 1.Promise简单介绍

Promise 是异步编程的一种解决方案，比传统的解决方案，回调函数和事件——更合理和更强大，Promise 是一个对象，从它可以获取异步操作的消息，Promise构造函数接受一个函数作为参数，该函数的两个参数分别是`resolve`和`reject,`基本样例：

```vue
const promise = new Promise((resolve, reject)=>{
        ses.sendEmail(params, function(err, data) {
            if (err) {
                reject (err);
            } else {
                resolve(data);
            } 
        });
 }); 
```

Promise实例生成以后，可以用`then`方法分别指定`resolved`状态和`rejected`状态的回调函数。

```
promise.then(function(value) {
  resolved(value);
}, function(error) {
  rejected(error);
});
```

但是一般不要在then方法里面定义reject状态的[回调函数](https://so.csdn.net/so/search?q=回调函数&spm=1001.2101.3001.7020)，强烈建议使用catch的方式进行处理，上面的写法可以改写为下面这种更加合理

```
promise.then(function(data) {    
    resolved(value);
}).catch(function(err) {
    console.log(error)
});
```

因为改写后的方式，既可以捕获前面 `then` 方法执行中的错误，也更接近同步的写法（ `try/catch` ）

### 2.async/await

ES2017 标准引入了 async 函数，使得异步操作变得更加方便。`async`表示函数里有异步操作，`await`表示紧跟在后面的表达式需要等待结果。

async有很多种使用形式：

```vue
// 函数声明
async function foo() {}
 
// 函数表达式
const foo = async function () {};
 
// 对象的方法
let obj = { async foo() {} };
obj.foo().then(...)
 
// Class 的方法
class Storage {
  constructor() {
    this.cachePromise = caches.open('avatars');
  }
 
  async getAvatar(name) {
    const cache = await this.cachePromise;
    return cache.match(`/avatars/${name}.jpg`);
  }
}
 
const storage = new Storage();
storage.getAvatar('jake').then(…);
 
// 箭头函数
const foo = async () => {};
```

我们可以测试一下async的返回值，写一个test.js

```
async function testAsync() {
    return "hello async";
}
 
const result = testAsync();
console.log(result);
```

MacdeMac-mini:work mac$ node test.js

Promise { 'hello async' }

运行之后发现，输出的是一个Promise对象，由此可知async 函数返回的是一个 Promise 对象，实际上async/await就是为了解决Promise写异步时then调用链的问题，如果我们在一个普通的函数里面没法使用await（await必须要在async函数里面才可以使用）来获取async函数的返回值的话，我们就可以用then的方式进行处理

```
testAsync().then(v => {
    console.log(v);    // 输出 hello async
});
```

我们可以认为await实际上是在等待async函数执行完成，因为 async 函数返回一个 Promise 对象，所以 await 可以用于等待一个 async 函数的返回值——这也可以说是 await 在等 async 函数，它等的实际是一个返回值。

```
async function testAsync() {
    return "hello async";
}
 
async function test() {
    const value = await testAsync();
    console.log(value);
}
test();
```

当函数执行的时候，一旦遇到`await`就会先返回，等到异步操作完成，再接着执行函数体内后面的语句。

一个函数要调用一个异步方法，同时该函数需要有返回值，我们可以这么写

```
exports.handler = async (event) => {
    var params = ""
    const result = await test_async(params);
    return result;
};
 
function test_async(params){
    const promise = new Promise((resolve, reject)=>{
        ses.sendEmail(params, function(err, data) {
            if (err) {
                reject (err);
            } else {
                resolve(data);
            } 
        });
    });  
    return promise;
 
}
```

上面的test_async这个方法并没有写async，但是实际上由于test_async这个方法本身返回的就是一个Promise对象，我们知道async所起的作用就是返回一个Promise的（上面提到过），所以这个地方可以不用写async效果一样的。然后我们就可以使用await来获取test_async的返回值，并且作为函数的return返回




[(20条消息) Js异步编程Promise和async/await方式总结_Crystalqy的博客-CSDN博客](https://blog.csdn.net/Crystalqy/article/details/80586494?ops_request_misc=&request_id=&biz_id=102&utm_term=promise&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-80586494.first_rank_v2_pc_rank_v29&spm=1018.2226.3001.4187)













