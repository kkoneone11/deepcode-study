# python



1.数据类型

### Numbers（数字）

您也可以使用del语句删除一些对象的引用。

del语句的语法是：

```python
del var1[,var2[,var3[....,varN]]]
```

Python支持四种不同的数字类型：

- int（有符号整型）
- long（长整型，也可以代表八进制和十六进制）
- float（浮点型）
- complex（复数）

> 长整型也可以使用小写 l，但是还是建议您使用大写 L，避免与数字 1 混淆。Python使用 L 来显示长整型。
>
> Python 还支持复数，复数由实数部分和虚数部分构成，可以用 a + bj,或者 complex(a,b) 表示， 复数的实部 a 和虚部 b 都是浮点型。

### String（字符串）

```python
s = "a1a2···an"   # n>=0
```

python的字串列表有2种取值顺序:

- 从左到右索引默认0开始的，最大范围是字符串长度少1
- 从右到左索引默认-1开始的，最大范围是字符串开头

![img](https://www.runoob.com/wp-content/uploads/2013/11/python-string-slice.png)

如果你要实现从字符串中获取一段子字符串的话，可以使用 **[头下标:尾下标]** 来截取相应的字符串，其中下标是从 0 开始算起，可以是正数或负数，下标可以为空表示取到头或尾。

**[头下标:尾下标]** 获取的子字符串包含头下标的字符，但不包含尾下标的字符。

```python
>>> s = 'abcdef'
>>> s[1:5]
'bcde'
```

```python
#!/usr/bin/python
# -*- coding: UTF-8 -*-
 
str = 'Hello World!'

print str           # 输出完整字符串 
print str[0]        # 输出字符串中的第一个字符 
print str[2:5]      # 输出字符串中第三个至第六个之间的字符串 
print str[2:]       # 输出从第三个字符开始的字符串
print str * 2       # 输出字符串两次
print str + "TEST"  # 输出连接的字符串
```

输出结果:

- ```
  Hello World!
  H
  llo
  llo World!
  Hello World!Hello World!
  Hello World!TEST
  ```

- 加号 **+** 是列表连接运算符，星号 ***** 是重复操作

- Python 列表截取可以接收第三个参数，参数作用是截取的步长，以下实例在索引 1 到索引 4 的位置并设置为步长为 2（间隔一个位置）来截取字符串

```python
>>> letters=['c','h','e','c','k','i','o']
>>> letters[1:4:2]=>['h','c']
```



### List（列表）

List（列表） 是 Python 中使用最频繁的数据类型。

列表可以完成大多数集合类的数据结构实现。它支持字符，数字，字符串甚至可以包含列表（即嵌套）。

列表用 **[ ]** 标识，是 python 最通用的复合数据类型。

列表中值的切割也可以用到变量 **[头下标:尾下标]** ，就可以截取相应的列表，从左到右索引默认 0 开始，从右到左索引默认 -1 开始，下标可以为空表示取到头或尾。

![img](https://www.runoob.com/wp-content/uploads/2014/08/list_slicing1_new1.png)

### Tuple（元组）

元组是另一个数据类型，类似于 List（列表）。

元组用 **()** 标识。内部元素用逗号隔开。但是元组不能二次赋值，相当于只读列表。

```python
#!/usr/bin/python 
# -*- coding: UTF-8 -*- 

tuple = ( 'runoob', 786 , 2.23, 'john', 70.2 )
tinytuple = (123, 'john')

print tuple               # 输出完整元组
print tuple[0]            # 输出元组的第一个元素
print tuple[1:3]          # 输出第二个至第四个（不包含）的元素  
print tuple[2:]           # 输出从第三个开始至列表末尾的所有元素
print tinytuple * 2       # 输出元组两次
print tuple + tinytuple   # 打印组合的元组

### 
```

输出结果如下：

```python
Hello World!
H
llo
llo World!
Hello World!Hello World!
Hello World!TEST
```

以下是元组无效的，因为元组是不允许更新的。而列表是允许更新的：

```python
#!/usr/bin/python 
# -*- coding: UTF-8 -*-  
tuple = ( 'runoob', 786 , 2.23, 'john', 70.2 ) 
list = [ 'runoob', 786 , 2.23, 'john', 70.2 ] 
tuple[2] = 1000    # 元组中是非法应用
list[2] = 1000     # 列表中是合法应用
```



### Dictionary（字典）

字典(dictionary)是除列表以外python之中最灵活的内置数据结构类型。列表是有序的对象集合，字典是无序的对象集合。

两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。

字典用"{ }"标识。字典由索引(key)和它对应的值value组成。

```python
#!/usr/bin/python 
# -*- coding: UTF-8 -*- 
dict = {}
dict['one'] = "This is one" 
dict[2] = "This is two" 

tinydict = {'name': 'runoob','code':6734, 'dept': 'sales'}   
print dict['one']          # 输出键为'one' 的值 
print dict[2]              # 输出键为 2 的值
print tinydict             # 输出完整的字典 
print tinydict.keys()      # 输出所有键
print tinydict.values()    # 输出所有值
```

输出结果：

```
This is one
This is two
{'dept': 'sales', 'code': 6734, 'name': 'runoob'}
['dept', 'code', 'name']
['sales', 6734, 'runoob']
```





2.循环语句

Python 提供了 for 循环和 while 循环（在 Python 中没有 do..while 循环）

### while循环

```python
while 判断条件(condition)：
    执行语句(statements)……
```

while 语句时还有另外两个重要的命令 continue，break 来跳过循环，continue 用于跳过该次循环，break 则是用于退出循环，此外"判断条件"还可以是个常值，表示循环必定成立，具体用法如下：

```python
# continue 和 break 用法 
i = 1 while i < 10:      
i += 1    if i%2 > 0:     # 非双数时跳过输出    
continue    print i         # 输出双数2、4、6、8、10 

i = 1 
while 1:            # 循环条件为1必定成立  
print i         # 输出1~10   
i += 1   
if i > 10:     # 当i大于10时跳出循环    
break
```

##### 无限循环

如果条件判断语句永远为 true，循环将会无限的执行下去.

**注意：**以上的无限循环你可以使用 CTRL+C 来中断循环。

##### 循环使用 else 语句

在 python 中，while … else 在循环条件为 false 时执行 else 语句块：

```python
#!/usr/bin/python  
count = 0 
while count < 5: 
    print count, " is  less than 5"  
    count = count + 1 
    else:  
    print count, " is not less than 5"
```

### for循环

for循环的语法格式如下：

```python
for iterating_var in sequence:
   statements(s)
```

```python
#!/usr/bin/python
# -*- coding: UTF-8 -*- 
for letter in 'Python':     # 第一个实例 
     print("当前字母: %s" % letter) 
        
        fruits = ['banana', 'apple',  'mango'] 
        for fruit in fruits:        # 第二个实例 
            print ('当前水果: %s'% fruit) 
            print ("Good bye!")


```

输出结果：

```python
当前字母: P
当前字母: y
当前字母: t
当前字母: h
当前字母: o
当前字母: n
当前水果: banana
当前水果: apple
当前水果: mango
Good bye!
```

##### 通过序列索引迭代

另外一种执行循环的遍历方式是通过索引，如下实例：

```python
#!/usr/bin/python
# -*- coding: UTF-8 -*- 
fruits = ['banana', 'apple',  'mango']
for index in range(len(fruits)):
    print ('当前水果 : %s' % fruits[index])
    print ("Good bye!")
```

结果:

```python
当前水果 : banana
当前水果 : apple
当前水果 : mango
Good bye!
```

以上实例我们使用了内置函数 len() 和 range(),函数 len() 返回列表的长度，即元素的个数。 range返回一个序列的数。

##### 循环使用 else 语句

在 python 中，for … else 表示这样的意思，for 中的语句和普通的没有区别，else 中的语句会在循环正常执行完（即 for 不是通过 break 跳出而中断的）的情况下执行，while … else 也是一样。

```python
#!/usr/bin/python 
# -*- coding: UTF-8 -*- 
for num in range(10,20):  # 迭代 10 到 20 之间的数字  
    for i in range(2,num): # 根据因子迭代   
        if num%i == 0:      # 确定第一个因子    
            j=num/i          # 计算第二个因子      
            print ('%d 等于 %d * %d' % (num,i,j))   
            break            # 跳出当前循环 
            else:                  # 循环的 else 部分   
             print ('%d 是一个质数' % num)

```

结果:

```python
10 等于 2 * 5
11 是一个质数
12 等于 2 * 6
13 是一个质数
14 等于 2 * 7
15 等于 3 * 5
16 等于 2 * 8
17 是一个质数
18 等于 2 * 9
19 是一个质数
```

### 嵌套循环

**Python for 循环嵌套语法：**

```python
for iterating_var in sequence: 
for iterating_var in sequence:    
statements(s) 
statements(s)
```

**Python while 循环嵌套语法：**

```python
while expression: 
while expression:  
statement(s) 
statement(s)

```

循环控制语句

### break语句

break语句用来终止循环语句，即循环条件没有False条件或者序列还没被完全递归完，也会停止执行循环语句。

break语句用在while和for循环中。

如果您使用嵌套循环，break语句将停止执行最深层的循环，并开始执行下一行代码。

### continue语句

Python continue 语句跳出本次循环，而break跳出整个循环。

continue 语句用来告诉Python跳过当前循环的剩余语句，然后继续进行下一轮循环。

continue语句用在while和for循环中。

```python
var = 10              
 while var > 0:        
var = var -1  
if var == 5:   
    continue  
    print '当前变量值 :', var 
    print "Good bye!"
```

```python
当前变量值 : 9
当前变量值 : 8
当前变量值 : 7
当前变量值 : 6
当前变量值 : 4
当前变量值 : 3
当前变量值 : 2
当前变量值 : 1
当前变量值 : 0
Good bye!
```

### pass语句

Python pass 是空语句，是为了保持程序结构的完整性。

**pass** 不做任何事情，一般用做占位语句。

***



3.函数

##### 定义一个函数

你可以定义一个由自己想要功能的函数，以下是简单的规则：

- 函数代码块以 **def** 关键词开头，后接函数标识符名称和圆括号**()**。

- 任何传入参数和自变量必须放在圆括号中间。圆括号之间可以用于定义参数。

- 函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。

- 函数内容以冒号起始，并且缩进。

- **return [表达式]** 结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None。

  语法：

```python
def functionname( parameters ): 
    "函数_文档字符串" 
    function_suite 
    return [expression]
```

##### 函数调用

```python
#!/usr/bin/python 
# -*- coding: UTF-8 -*- 
# 定义函数 def printme( str ):  
"打印任何传入的字符串"  
print str  
return 
# 调用函数
printme("我要调用用户自定义函数!")
printme("再次调用同一函数")
```

结果：

```python
我要调用用户自定义函数!
再次调用同一函数
```

##### 参数传递

在 python 中，类型属于对象，变量是没有类型的：

```python
a=[1,2,3] 

 a="Runoob"
```

以上代码中，**[1,2,3]** 是 List 类型，**"Runoob"** 是 String 类型，而变量 a 是没有类型，她仅仅是一个对象的引用（一个指针），可以是 List 类型对象，也可以指向 String 类型对象。

#### 可更改(mutable)与不可更改(immutable)对象

在 python 中，strings, tuples, 和 numbers 是不可更改的对象，而 list,dict 等则是可以修改的对象。

- **不可变类型：**变量赋值 **a=5** 后再赋值 **a=10**，这里实际是新生成一个 int 值对象 10，再让 a 指向它，而 5 被丢弃，不是改变a的值，相当于新生成了a。
- **可变类型：**变量赋值 **la=[1,2,3,4]** 后再赋值 **la[2]=5** 则是将 list la 的第三个元素值更改，本身la没有动，只是其内部的一部分值被修改了。

python 函数的参数传递：

- **不可变类型：**类似 c++ 的值传递，如 整数、字符串、元组。如fun（a），传递的只是a的值，没有影响a对象本身。比如在 fun（a）内部修改 a 的值，只是修改另一个复制的对象，不会影响 a 本身。
- **可变类型：**类似 c++ 的引用传递，如 列表，字典。如 fun（la），则是将 la 真正的传过去，修改后fun外部的la也会受影响

#### 参数

以下是调用函数时可使用的正式参数类型：

- 必备参数

必备参数须以正确的顺序传入函数。调用时的数量必须和声明时的一样。

调用printme()函数，你必须传入一个参数，不然会出现语法错误

- 关键字参数

使用关键字参数允许函数调用时参数的顺序与声明时不一致，因为 Python 解释器能够用参数名匹配参数值。

以下实例在函数 printme() 调用时使用参数名

```python
#!/usr/bin/python
# -*- coding: UTF-8 -*- 
#可写函数说明
def printinfo( name, age ): 
    "打印任何传入的字符串" 
    print "Name: ", name 
    print "Age ", age 
    return 
#调用printinfo函数
printinfo( age=50, name="miki" )

```

- 默认参数

  调用函数时，默认参数的值如果没有传入，则被认为是默认值。

- 不定长参数

你可能需要一个函数能处理比当初声明时更多的参数。这些参数叫做不定长参数，和上述2种参数不同，声明时不会命名。基本语法如下：

```python
def functionname([formal_args,] *var_args_tuple ): 
    "函数_文档字符串" 
    function_suite 
    return [expression]
```

##### 匿名函数

python 使用 lambda 来创建匿名函数。

- lambda只是一个表达式，函数体比def简单很多。
- lambda的主体是一个表达式，而不是一个代码块。仅仅能在lambda表达式中封装有限的逻辑进去。
- lambda函数拥有自己的命名空间，且不能访问自有参数列表之外或全局命名空间里的参数。
- 虽然lambda函数看起来只能写一行，却不等同于C或C++的内联函数，后者的目的是调用小函数时不占用栈内存从而增加运行效率。

语法

lambda函数的语法只包含一个语句，如下：

```python
lambda [arg1 [,arg2,.....argn]]:expression
```

```python
#!/usr/bin/python
# -*- coding: UTF-8 -*-  
# 可写函数说明 sum = lambda arg1, arg2: arg1 + arg2 
# 调用sum函数 
print "相加后的值为 : ", sum( 10, 20 )
print "相加后的值为 : ", sum( 20, 20 )
```

结果:

```python
相加后的值为 :  30
相加后的值为 :  40
```

##### return 语句

return语句[表达式]退出函数，选择性地向调用方返回一个表达式。不带参数值的return语句返回None。





4.模块

Python 模块(Module)，是一个 Python 文件，以 .py 结尾，包含了 Python 对象定义和Python语句。

模块让你能够有逻辑地组织你的 Python 代码段。

把相关的代码分配到一个模块里能让你的代码更好用，更易懂。

模块能定义函数，类和变量，模块里也能包含可执行的代码。

##### import 语句

##### 模块的引入

模块定义好后，我们可以使用 import 语句来引入模块，语法如下：

```python
import module1[, module2[,... moduleN]]
```

比如要引用模块 math，就可以在文件最开始的地方用 **import math** 来引入。在调用 math 模块中的函数时，必须这样引用:

```python
模块名.函数名
```

```python
#!/usr/bin/python 
# -*- coding: UTF-8 -*- 
# 导入模块 
import support 
# 现在可以调用模块里包含的函数了 
support.print_func("Runoob")

```

##### from…import 语句

Python 的 from 语句让你从模块中导入一个指定的部分到当前命名空间中。语法如下：

```
from modname import name1[, name2[, ... nameN]]
```

例如，要导入模块 fib 的 fibonacci 函数，使用如下语句：

```
from fib import fibonacci
```

这个声明不会把整个 fib 模块导入到当前的命名空间中，它只会将 fib 里的 fibonacci 单个引入到执行这个声明的模块的全局符号表。

------

##### from…import* 语句

把一个模块的所有内容全都导入到当前的命名空间也是可行的，只需使用如下声明：

```
from modname import *
```

这提供了一个简单的方法来导入一个模块中的所有项目。然而这种声明不该被过多地使用。

例如我们想一次性引入 math 模块中所有的东西，语句如下：

```
from math import *
```

------

##### 搜索路径

当你导入一个模块，Python 解析器对模块位置的搜索顺序是：

- 1、当前目录
- 2、如果不在当前目录，Python 则搜索在 shell 变量 PYTHONPATH 下的每个目录。
- 3、如果都找不到，Python会察看默认路径。UNIX下，默认路径一般为/usr/local/lib/python/。

模块搜索路径存储在 system 模块的 sys.path 变量中。变量里包含当前目录，PYTHONPATH和由安装过程决定的默认目录。



------

##### PYTHONPATH 变量

作为环境变量，PYTHONPATH 由装在一个列表里的许多目录组成。PYTHONPATH 的语法和 shell 变量 PATH 的一样。

在 Windows 系统，典型的 PYTHONPATH 如下：

```
set PYTHONPATH=c:\python27\lib;
```

在 UNIX 系统，典型的 PYTHONPATH 如下：

```
set PYTHONPATH=/usr/local/lib/python
```



------

##### 命名空间和作用域

变量是拥有匹配对象的名字（标识符）。命名空间是一个包含了变量名称们（键）和它们各自相应的对象们（值）的字典。

一个 Python 表达式可以访问局部命名空间和全局命名空间里的变量。如果一个局部变量和一个全局变量重名，则局部变量会覆盖全局变量。

每个函数都有自己的命名空间。类的方法的作用域规则和通常函数的一样。

Python 会智能地猜测一个变量是局部的还是全局的，它假设任何在函数内赋值的变量都是局部的。

因此，如果要给函数内的全局变量赋值，必须使用 global 语句。

global VarName 的表达式会告诉 Python， VarName 是一个全局变量，这样 Python 就不会在局部命名空间里寻找这个变量了。

## dir()函数

dir() 函数一个排好序的字符串列表，内容是一个模块里定义过的名字。

返回的列表容纳了在一个模块里定义的所有模块，变量和函数。如下一个简单的实例：

```python
#!/usr/bin/python
# -*- coding: UTF-8 -*-
 
# 导入内置math模块
import math
 
content = dir(math)
 
print content;
```



以上实例输出结果：

```python
['__doc__', '__file__', '__name__', 'acos', 'asin', 'atan', 
'atan2', 'ceil', 'cos', 'cosh', 'degrees', 'e', 'exp', 
'fabs', 'floor', 'fmod', 'frexp', 'hypot', 'ldexp', 'log',
'log10', 'modf', 'pi', 'pow', 'radians', 'sin', 'sinh', 
'sqrt', 'tan', 'tanh']
```



##### globals() 和 locals() 函数

根据调用地方的不同，globals() 和 locals() 函数可被用来返回全局和局部命名空间里的名字。

如果在函数内部调用 locals()，返回的是所有能在该函数里访问的命名。

如果在函数内部调用 globals()，返回的是所有在该函数里能访问的全局名字。

两个函数的返回类型都是字典。所以名字们能用 keys() 函数摘取。



------

##### reload() 函数

当一个模块被导入到一个脚本，模块顶层部分的代码只会被执行一次。

因此，如果你想重新执行模块里顶层部分的代码，可以用 reload() 函数。该函数会重新导入之前导入过的模块。语法如下：

```
reload(module_name)
```

在这里，module_name要直接放模块的名字，而不是一个字符串形式。比如想重载 hello 模块，如下：

```
reload(hello)
```